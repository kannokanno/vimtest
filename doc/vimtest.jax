*vimtest.txt*	Vim scriptのテストフレームワーク

Version: 0.0.5
Author: kanno <akapanna@gmail.com>

==============================================================================
目次						*vimtest-contents*

概要						|vimtest-introduction|
使い方						|vimtest-usage|
自動source					|vimtest-auto-source|
テストケース					|vimtest-testcase|
テンプレートメソッド				|vimtest-template-method|
アサーション					|vimtest-assert|
カスタムプロパティ				|vimtest-custom|
命名規則					|vimtest-name-rule|
モック						|vimtest-mock|
設定						|vimtest-settings|
設定例						|vimtest-settings-example|
コマンド					|vimtest-command|
コマンドライン実行				|vimtest-command-line|
コマンドライン実行の設定			|vimtest-command-line-settings|
サンプル					|vimtest-example|
FAQ						|vimtest-faq|
更新履歴					|vimtest-changelog|


==============================================================================
概要						*vimtest-introduction*

*vimtest* はVim scriptのテストコードを実行するVimプラグインです。

最新版:
http://github.com/kannokanno/vimtest


==============================================================================
使い方						*vimtest-usage*

VimTestを使ってテストを作るのに最低限必要な手順は次の4つです。
  1. テストケースを作成する
  2. テストメソッドを定義する
  3. テストメソッド内でアサートを記述する
  4. テストを実行する


1. テストケースを作成する			*vimtest-create-testcase*
テストケースはxUnitにおけるテストクラスと同じ単位になります。
作成には |vimtest#new()| を使用します。
詳細は |vimtest-testcase| を参照ください。

>
	let s:testcase = vimtest#new()
<

2. テストメソッドを定義する			*vimtest-define-testmethod*
s:testcaseは辞書になっているので、このインスタンスに対してテストメソッドを
追加定義します。
他言語のテストフレームワークと同様に、setUpやtearDownも使えます。
詳細は |vimtest-template-method| を参照ください。

>
	let s:testcase = vimtest#new()
	function! s:testcase.sum()
	endfunction
<

3. テストメソッド内でアサートを記述する		*vimtest-write-assert*
テストメソッド内ではs:testcaseに予め定義されているアサートが使えます。
詳細は |vimtest-assert| を参照ください。

>
	let s:testcase = vimtest#new()
	function! s:testcase.sum()
	  call self.assert.equals(3, 1 + 2)
	endfunction
<

4. テストを実行する				*vimtest-execute*
テストの実行には |:VimTest| コマンドを使います。
詳細は |vimtest-command| を参照ください。

これまでに書いたテストを保存して実行すると、VimTest用のバッファが生成されて
次のように出力されます。
最初の行は対象のファイル名が出力されます。
>
	sample.vim
	 [x] sum
	
	
	Test cases run: 1, Assertions: 1, Passes: 1, Failures: 0
<


==============================================================================
自動source					*vimtest-auto-source*

テストを実行する際に、命名規則を用いてテストファイルからプロダクトコードを探し
ます。もし該当するプロダクトコードが見つかった場合、テスト実行前にプロダクト
コードがsourceされます。
プロダクトコードが見つからない場合は何もせずそのままテストが実行されます。
これにより毎回手動でsourceする手間を省略出来ます。

具体的には次のようにしてパス変換を行いプロダクトコードを探します。
1. パスから "/test/" を削除
2. ファイル名を "xx_test.vim" から "xx.vim" に変更
	{ディレクトリ}/test/{ディレクトリ}/xx_test.vim
	↓
	{ディレクトリ}/{ディレクトリ}/xx.vim

例：
	~/.vim/bundle/vimtest/test/autoload/vimtest/runner_test.vim
	↓
	~/.vim/bundle/vimtest/autoload/vimtest/runner.vim

この機能を使うために、以下のようにしてテストディレクトリを構築することをお勧め
します。
.
├── README.markdown
├── autoload
│   ├── vimtest
│   │   └── runner.vim
│   └── vimtest.vim
├── doc
│   └── vimtest.txt
├── plugin
│   └── vimtest.vim
└── test
     └── autoload
          ├─ vimtest
          │ └── runner_test.vim
          ├─ plugin
          │ └── vimtest_test.vim
          └ vimtest_test.vim

自動でsourceしないようにする場合は |g:vimtest_config| のauto_sourceを0にする必
要があります。

==============================================================================
テストケース					*vimtest-testcase*

vimtest#new([{name}])				*vimtest#new()*
	テストケース用のインスタンスを生成します。
	{name} にはテストを識別するための名前を指定出来ます。{name} を省略した
	場合は現在のファイル名が設定されます。

	{name} を指定した場合の例を以下に示します。
>
	" ~/vimtest_sample.vim
	let s:testcase = vimtest#new('サンプルテスト')
	function! s:testcase.sum()
	  " わざと失敗するテストを実行し、出力を確認する
	  call self.assert.equals(3, 2)
	endfunction
<
>
	:VimTest

	サンプルテスト
	 [ ] sum
	
	
	# サンプルテスト (in vimtest_sample.vim)
	 1) 'sum' is FAILED
	  Failed asserting that two values are equal
	   - expected:3
	   +   actual:2
	
	Test cases run: 1, Assertions: 1, Passes: 0, Failures: 1
<

	{name} を省略した場合の例を以下に示します。
>
	" ~/vimtest_sample.vim
	let s:testcase = vimtest#new()
	function! s:testcase.sum()
	  " わざと失敗するテストを実行し、出力を確認する
	  call self.assert.equals(3, 2)
	endfunction
<
>
	:VimTest

	vimtest_sample.vim
	 [ ] sum
	
	
	# vimtest_sample.vim (in vimtest_sample.vim)
	 1) 'sum' is FAILED
	  Failed asserting that two values are equal
	   - expected:3
	   +   actual:2


	Test cases run: 1, Assertions: 1, Passes: 0, Failures: 1
<


==============================================================================
テンプレートメソッド				*vimtest-template-method*

|vimtest#new()| で生成したテストケースにはいくつかのテンプレートメソッドを定義
出来ます。これは他言語のxUnitフレームワークによく見られるテンプレートメソッド
と機能的に同じです。

startup()					*vimtest-template-startup*
	テストケースが初期化された後に一度だけ実行されます。

setup()						*vimtest-template-setup*
	各テストメソッドが実行される前に実行されます。

teardown()					*vimtest-template-teardown*
	各テストメソッドが実行された後に実行されます。

shutdown()					*vimtest-template-shutdown*
	全てのテストが終了した後に一度だけ実行されます。


これらテンプレートメソッドの流れを確認するためのサンプルを以下に示します。
>
	let s:testcase = vimtest#new()
	function! s:testcase.startup()
	  echo 'startup'
	endfunction
	function! s:testcase.setup()
	  echo '  setup'
	endfunction
	function! s:testcase.test_one()
	  echo '   test one'
	endfunction
	function! s:testcase.test_two()
	  echo '   test two'
	endfunction
	function! s:testcase.test_three()
	  echo '   test three'
	endfunction
	function! s:testcase.teardown()
	  echo '  teardown'
	endfunction
	function! s:testcase.shutdown()
	  echo 'shutdown'
	endfunction
<

このサンプルテストを実行すると以下のように出力されます。
NOTE:各テストメソッドの順序は保証されないため、この例と異なる可能性があります。
>
	:VimTestStdout
	startup
	  setup
	   test one
	  teardown
	  setup
	   test two
	  teardown
	  setup
	   test three
	  teardown
	shutdown
	

	Test cases run: 0, Assertions: 0, Passes: 0, Failures: 0
<


==============================================================================
アサーション					*vimtest-assert*

各テストメソッド内ではいくつかのアサートを呼び出すことができます。これはテスト
ケースに標準で定義されている辞書関数です。
self.assertを使ってアサート用のオブジェクトを取り出し、そこから各アサートメ
ソッドを呼び出します。
例えば二つの引数が同一であることを調べるためのequalsメソッドは次のように使いま
す。

>
	let s:testcase = vimtest#new()
	function! s:testcase.sum()
	  call self.assert.equals(3, 1 + 2)
	endfunction
<

assert.equals(expected, actual)			*vimtest-assert-equals*
	expected と actual が同一であるか検証します。二つの値が異なる場合には
	テストが失敗します。
	このメソッドにおける同一とは型が同じかつ==#の値が1であることを意味します。
	型が違う場合、大文字小文字の違い、リスト要素の順序の違いなどは失敗扱い
	となります。

テストが成功する例を以下に示します。
>
	let s:testcase = vimtest#new('assert example')
	function! s:testcase.equals_success()
	  call self.assert.equals(1, 1)
	  call self.assert.equals('a', 'a')
	  call self.assert.equals([], [])
	  call self.assert.equals([1], [1])
	  call self.assert.equals(['a'], ['a'])
	  call self.assert.equals({'a':1, 'b':2}, {'a':1, 'b':2})
	endfunction
<

テストが失敗する例を以下に示します。
>
	function! s:testcase.equals_failure()
	  call self.assert.equals('a', 'A')
	  call self.assert.equals(['b', 'a'], ['a', 'b'])
	endfunction
<

assert.not_equals(expected, actual)		*vimtest-assert-not_equals*
	expected と actual が同一でないか検証します。これは
	|vimtest-assert-equals| と反対の動きになります。

assert.true(actual)			*vimtest-assert-true*
	actual が以下のいずれかであるか検証します。該当する値でなかった場合に
	テストが失敗します。
	  - 0以外の数字(負の数字含む)
	  - 文字列を数字に変換した場合に0以外となる('1'、'1a'など)

	-1や'1a'なども成功値としているのはVimの仕様に合わせているためです。
	例えば以下の例では a が出力されます。
>
	if -1
	  echo 'a'
	else
	  echo 'b'
	endif
<

テストが成功する例を以下に示します。
>
	let s:testcase = vimtest#new('assert example')
	function! s:testcase.true_success()
	  call self.assert.true(1)
	  call self.assert.true('1')
	  call self.assert.true('1a')
	  call self.assert.true(-1)
	endfunction
<

テストが失敗する例を以下に示します。
>
	function! s:testcase.true_failure()
	  call self.assert.true(0)
	  call self.assert.true('a')
	  call self.assert.true('a1')
	  call self.assert.true([])
	endfunction
<

assert.false(actual)				*vimtest-assert-false*
	actual を数字に変換した際の値が0かどうかを検証します。0以外の値だった
	場合にテストが失敗します。これは |vimtest-assert-true| と反対の動きに
	なります。

assert.success()				*vimtest-assert-success*
	強制的にテストを成功させます。

assert.fail([{message}])			*vimtest-assert-fail*
	強制的にテストを失敗させます。失敗時のメッセージを {message} で指定出
	来ます。

assert.throw([{error}])				*vimtest-assert-throw*
	このテストケースにて特定の例外が発生するかどうかを検証します。{error}
	が発生しなかった場合にテストが失敗します。
	{error} にはVim標準のエラーIDかエラー文字列を指定します。
	エラーIDとはE492のような文字列を指します。(参考:|errors|)
>
	function! s:testcase.expected_exception()
	  call self.assert.throw('E492')
	  " Exception:Vim:E492: エディタのコマンドではありません:   hoge
	  hoge
	endfunction
<

	エラー文字列はthrowが発生した時点の文字列です。
>
	function! s:testcase.expected_exception()
	  call self.assert.throw('sample exception')
	  throw 'sample exception'
	endfunction
<

assert.throw_match({regexp})			*vimtest-assert-throw_match*
	このテストケースにて指定した正規表現にマッチする例外が発生するかどう
	かを検証します。{regexp}にマッチする例外が発生しなかった場合にテストが
	失敗します。
>
	" 'foobar'は正規表現'^foo'にマッチするので、このテストは成功する。
	function! s:testcase.throw_match_example()
	  call self.assert.throw_match('^foo')
	  throw 'foobar'
	endfunction
<

==============================================================================
カスタムプロパティ				*vimtest-custom*

|vimtest#new()| で作成されるテストケースの実体は辞書のため、ユーザー側にて独自に
変数や辞書関数を定義することができます。これらは各テストメソッドから自由に参照
出来るため、固定値やテスト対象の初期化に使うことが出来ます。
xUnitテストフレームにおける、テストクラス内での変数やヘルパー関数に似ていま
す。

全てのテストで共通して使う固定値の場合は次のように定義すればよいでしょう。
>
	let s:testcase = vimtest#new()
	" 期待値が固定のため変数定義する
	let s:testcase.expected = 99

	function! s:testcase.sample1()
	  call self.assert.equals(self.expected, SomeFunction1())
	endfunction
	function! s:testcase.sample2()
	  call self.assert.equals(self.expected, SomeFunction2())
	endfunction
<

辞書関数の場合も同様に定義出来ます。
ただし辞書関数の場合、先頭に_を付ける必要があります。_が付いていないものは全て
テストメソッドとして実行されるので注意してください。
>
	function! s:testcase._some_helper()
	  " do something
	endfunction
<

もしテスト毎に定義し直したい場合はテンプレートメソッド内で定義します。
テンプレートメソッドについては |vimtest-template-method| を参照して下さい。
次の例ではテストメソッド毎に定義する必要性を示せてはいませんが、使い方に関する
サンプルにはなります。
>
	let s:testcase = vimtest#new()
	function! s:testcase.setup()
	  let self._ = {'expected': 1}
	  function! self._.data_provider()
	    return ['a', 'b', 'c']
	  endfunction
	endfunction
	function! s:testcase.sample()
	  for arg in self._.data_provider()
	    call self.assert.equals(self._.expected, SomeFunction(arg))
	  endfor
	endfunction
<


==============================================================================
命名規則					*vimtest-name-rule*

テストケースに追加定義する変数名または関数名として、以下の名前は使えません。
	- assert
	- _run
	- _get_testcases

これらの名前を使うとテストが正常に動作しない可能性があります。


また、テストメソッド名を"_"から始めるとそのテストは実行されません。
テストケースのオブジェクトに辞書関数を追加したいが、テストとして実行させたくな
い時にこのルールを利用できます。
>
	let s:testcase = vimtest#new()
	function! s:testcase._not_test()
	  " do something
	endfunction
	function! s:testcase.test()
	  " do test
	endfunction
<


==============================================================================
モック						*vimtest-mock*

[kannokanno/vmock](https://github.com/kannokanno/vmock) がインストールされてい
るとvmockの機能が使えます。
以下にコード例を示します。
>
	let s:testcase = vimtest#new()
	function! s:testcase.test()
	  " original return value
	  call self.assert.equals(1, SomeFunc('arg'))
	  " mock setting
	  call vmock#mock('SomeFunc').with('arg').return(100).once()
	  " mock return value
	  call self.assert.equals(100, g:vimtest_test_func_one_args('arg'))
	endfunction
<
テストケース毎の終了時に、モックの引数検証と呼び出し回数の検証を行います。もし
期待値と一致しない場合はテストが失敗します。

モックの機能に関する詳細はvmockのヘルプを参照してください。


==============================================================================
設定						*vimtest-settings*
						*g:vimtest_config*


グローバル変数 |g:vimtest_config| を.vimrcなどに定義することで、設定した値が適
用されます。
一部の設定値に関しては手動で更新を知らせる必要があります。|:VimTestResttings|
を参照してください。

outputter
	型:文字列

	|:VimTest| で実行する際の出力タイプを指定します。指定可能な値は
	"buffer", "string", "stdout", "quickfix" です。

	デフォルトの設定値は "buffer" です。

autotest_watch_patterns
	型:リスト

	自動再テストを行うための監視対象を指定します。
	指定したパターンに一つでも一致するファイルが保存されると自動で
	|:VimTest| を実行します。実行対象は |autotest_testpath| が使われます。
	|autotest_testpath| と併せて両方とも空でない場合に有効となります。
	このオプションは内部的に |autocommand| を行うために使われます。
	例えば ["~/.vim/bundle/vimtest/test/*.vim"] という値は次のように変換さ
	れて定義されます。
>
	autocmd BufwritePost ~/.vim/bundle/vimtest/test/*.vim VimTest filepath
<

	デフォルトの設定値は [] です。つまり自動でテストが再実行されることはあ
	りません。

autotest_testpath
	型:文字列

	|autotest_watch_patterns| の監視により再テストが走る際の、|:VimTest|
	へ渡す対象ファイル(ディレクトリ)を指定します。
	|autotest_watch_patterns| と併せて両方とも空でない場合に有効となります。

	デフォルトの設定値は "" です。つまり自動でテストが再実行されることはあ
	りません。

show_summary_cmdline
	型:数値

	テスト結果のサマリーをコマンドラインに表示する場合は 1 を指定します。
	表示させたくない場合には 0 を指定します。
	サマリーとは次のような内容を指します。
>
	Test cases run: 5, Assertions: 10, Passes: 8, Failures: 2
<

	デフォルトの設定値は 1 です。

auto_source
	型:数値

	テスト実行前に対象となるプロダクトコードを |:source| する場合は 1 を指
	定します。
	|:source| させたくない場合は 0 を指定します。

	デフォルトの設定値は 1 です。

autotest_cmd
	型:辞書関数
	引数:再テスト対象のパス

	|autotest_watch_patterns| の監視により再テストが実行される際の処理を定
	義します。
        設定例:
>
	function! g:vimtest_config.autotest_cmd(testpath)
	  echo "test rerun!"
	  execute "VimTest " . a:testpath
	endfunction
<
	この設定と |vimtest-command-line| とOS標準のtailコマンドを使うことで自
	動テストを実現することができます。(ただしWindowsは不可)
        まず.vimrcに次のように設定を記述します。
>
	function! g:vimtest_config.autotest_cmd(testpath)
	  execute 'silent! !cd ~/new-plugin/test; ~/.vim/bundle/vimtest/bin/vimtest .'
	endfunction
<
	続いて、ターミナルからtailコマンドで実行結果のtmpファイルを監視します。
>
	/Users/kanno% tail -f .vim/bundle/vimtest/bin/vimtest_result.txt
<
	これで、監視対象のファイルが保存されるたびにテストが実行され、その結果
	がターミナルでの表示に反映されるようになります。

	デフォルトの設定は次のようになっています。つまり |:VimTest| コマンドを実
	行します。
>
	function! default.autotest_cmd(testpath)
	  execute "VimTest " . a:testpath
	endfunction
<


==============================================================================
設定例						*vimtest-settings-example*


|vimtest-settings| の設定例です。次の設定を.vimrcに加えたとします。

>
	let g:vimtest_config = {
	      \ 'outputter': 'quickfix',
	      \ 'autotest_watch_patterns':
	      \    ['~/.vim/bundle/vimtest/test/*.vim',
	      \    '~/.vim/bundle/vimtest/autoload/vimtest/*.vim'],
	      \ 'autotest_testpath': '~/.vim/bundle/vimtest/test/autoload',
	      \ }
<

この例における設定内容を説明します。
outputter
	"quickfix" を指定しているため、|:VimTest| の実行コマンドが
	|:VimTestQuickfix| へのエイリアスへと置き換わります。

autotest_watch_patterns
	"~/.vim/bundle/vimtest/test/*.vim" の指定によりテストディレクトリ配下
	のファイルに更新が走った場合に自動再テストを走らせるようにしています。
	"~/.vim/bundle/vimtest/autoload/vimtest/*.vim" の指定によりプロダクト
	コードに更新が走った場合に自動再テストを走らせるようにしています。

autotest_testpath
	自動再テストを行う場合は全テストを走らせたいため、ディレクトリを指定し
	ます。これにより "~/.vim/bundle/vimtest/test/autoload" 以下にあるテス
	トが全て実行されます。

また、ここで指定してない他のオプションについてはデフォルト値が使用されます。


==============================================================================
コマンド					*vimtest-command*

						*:VimTest*
:VimTest [{file}]
	このコマンドは |:VimTestBuffer| のエイリアスです。

						*:VimTestBuffer*
:VimTestBuffer [{file}]
	テストを実行します。テスト対象となるファイルを {file} に指定出来ます。
	{file} を省略した場合は現在のファイルが対象となります。
	ディレクトリを指定した場合は配下の*_test.vimが全て対象となります。
	テストの実行結果を専用の出力バッファに表示します。

						*:VimTestStdout*
:VimTestStdout [{file}]
	テストを実行します。テスト対象となるファイルを {file} に指定出来ます。
	{file} を省略した場合は現在のファイルが対象となります。
	ディレクトリを指定した場合は配下の*_test.vimが全て対象となります。
	テストの実行結果を標準出力に表示します。

						*:VimTestQuickfix*
:VimTestQuickfix [{file}]
	テストを実行します。テスト対象となるファイルを {file} に指定出来ます。
	{file} を省略した場合は現在のファイルが対象となります。
	ディレクトリを指定した場合は配下の*_test.vimが全て対象となります。
	テストの実行結果をQuickfixに表示します。失敗しているテストが存在する場
	合のみQuickfixが開かれます。

						*:VimTestResttings*
:VimTestResettings
	|g:vimtest_config| の内容を明示的に更新します。
	ほとんどの設定更新についてはこのコマンドを使用する必要はありません。
	以下の設定値を更新したい場合のみ、このコマンドを使用してください。
	- autotest_watch_patterns
	- autotest_testpath


==============================================================================
コマンドライン実行				*vimtest-command-line*

NOTE:この機能は現在Windowsでは使えません。

ターミナルから次のようにコマンドでvimtestを走らせることができます。
>
	{vimtestディレクトリ/bin/vimtestのパス} {テスト対象のパス}
<

例えばvimtest標準のテストケースを実行するには次のようになります。
>
	/Users/kanno% ~/.vim/bundle/vimtest/bin/vimtest ~/.vim/bundle/vimtest/test/autoload
<
NOTE:コマンド実行をすると内部的にVimを2度立ちあげているため、出力する際に画面
がチカチカします。

テストの実行結果は {vimtestディレクトリ}/bin/vimtest_result.txt として生成され
ます。これはテストが走るたびに毎回上書きされます。

このコマンドは標準では以下のように最小設定のVimを起動してテストを実行します。
>
	vim -i NONE -u NONE -U NONE -N
<
テストのために |runtimepath| など設定を追加したい場合は、コマンドを実行する
ディレクトリと同ディレクトリに |.vimrc| を作成します。
vimtestは実行ディレクトリに設定ファイルがあるとそれを読み込みます。このような
設定ファイルには以下のものが該当します。
|.vimrc| |.gvimrc| |.viminfo|

なお、コマンドライン実行のみに使える特別な設定を |.vimrc| に記述できます。
|vimtest-command-line-settings| を参照してください。


==============================================================================
コマンドライン実行の設定			*vimtest-command-line-settings*

|vimtest-command-line| で使用される設定です。vimtestを実行するディレクトリと同じ
ディレクトリにある |.vimrc| に記述する必要があります。

						*g:vimtest_vim_command*
g:vimtest_vim_command
	テストを実行するvimコマンドのパスを指定します。PATHに通っていないvimで
	実行する場合に使うとよいでしょう。

	デフォルトは vim です。
	設定例:
>
	let g:vimtest_vim_command = '/Applications/MacVim.app/Contents/MacOS/Vim'
<


全体としての設定例です。
>
	" テストに必要なruntimepathの追加
	let &runtimepath = '/Users/kanno/tmp/new-plugin'
	" テストを実行するVimのパスを指定
	let g:vimtest_vim_command = '/Applications/MacVim.app/Contents/MacOS/Vim'
<

==============================================================================
サンプル					*vimtest-example*

vimtest/sampleにいくつかのサンプルがあります。参考にしてください。
またvimtest自体のテストにvimtestが使われています。興味がある場合はvimtest/test
以下のファイルをご覧ください。


==============================================================================
FAQ						*vimtest-faq*

Q: 例外発生後のアサーションが実行されないのですがどうしたらいいでしょうか。
A: テストコード側で対応していただくことになります。

コード例1.
>
	let s:tests = vimtest#new('example')
	function! s:tests.test()
	  call self.assert.throw('error')
	  try
	    call s:func()
	  finally
	    call self.assert.equals('original', s:var)
	  endtry
	endfunction
<

コード例2.
>
	let s:tests = vimtest#new('example')
	function! s:tests.test()
	  try
	    call s:func()
	  catch
	    call self.assert.equals('error', v:exception)
	    call self.assert.equals('original', s:var)
	  endtry
	endfunction
<

関係するissues
* https://github.com/kannokanno/vimtest/issues/2


==============================================================================
更新履歴					*vimtest-changelog*

0.0.6	2013-07-19
	- モック機能(vmock)を追加
	- いくつかのバグを修正

0.0.5	2013-04-06
	- vimtest_configにauto_source追加
	- vimtest_configにauto_cmd追加
	- コマンドライン実行の機能追加(ただしWindows除く)

0.0.4	2013-03-06
	- 実行結果の表示フォーマットを変更
	- 実行結果にハイライトを追加
	- 例外テスト機能を追加
	- いくつかのバグを修正

0.0.3	2012-10-14
	- 実行対象にディレクトリを指定可能にした
	- テスト実行前に自動で製品コードをsourceするようにした
	- 失敗メッセージにテストファイルのフルパスを表示
	- 実行コマンド(:VimTestQuickfix)の追加
	- 標準で実行するoutputterの指定を可能にした
	- コマンドラインにサマリーを表示するようにした
	- 自動テストを行うための監視対象を指定出来るようにした
	- 設定を手動で更新するための:VimTestResettingsの追加
	- いくつかのバグを修正

0.0.2	2012-10-06
	- 実行コマンド(:VimTest/:VimTestBuffer/:VimTestStdout)の追加
	- 出力結果のフォーマットを変更
	- notEquals -> not_equalsにリネーム
	- 日本語helpの追加
	- vimtest/sampleを更新
	- vimtest/testを追加
	- READMEの内容を更新
	- 多くのリファクタを実施
	- 多くのバグを修正

0.0.1	2012-03-31
	- 初版

vim:tw=78:ts=8:ft=help:norl:
